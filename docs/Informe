# COMPUTACION Y ESTRUCTURAS DISCRETAS II
## TAREA INTEGRADORA FINAL

### INTEGRANTES
- Damy Villegas ‚Äì A00398942
- Juan Manuel Zuluaga ‚Äì A00399738
- Juan Esteban G√≥mez ‚Äì A00400293

### 1) ALGORITMO CHECKSUM 

Este algoritmo es una t√©cnica utilizada para verificar la integridad de datos transmitidos o almacenados, 
su objetivo principal es detectar errores en los datos. Esto se lo hace calculando un valor (el checksum) a partir
de los datos originales, para luego utilizarlos y comprobar si los datos han sido alterados o corrompidos.

En nuestro proyecto la clase que incorpora este algoritmo se llama ‚ÄòCheckSumCalculator‚Äô, la cual proporciona una 
manera de calcular y a la vez verificar checksums tanto para secuencias de bytes como para cadenas de texto.
El proceso de calculo checksum implica sumar los valores de los bytes asegur√°ndose que el resultado este dentro del
rango de un byte. Su verificaci√≥n se realiza comparando el checksum con un checksum previamente obtenido para determinar
si los datos han sido alterados. 

#### COMPLEJIDAD DEL ALGORITMO 

Calculamos la complejidad de nuestro algoritmo en t√©rminos de ùëÇ(ùëõ), donde n es el tama√±o de los datos de entrada,
esto lo hicimos para cada funci√≥n definida en nuestro algoritmo: 

- `def calculate(data: Array[Byte]): Int = {}`
  Esta funci√≥n recorre todos los elementos de un Array data, realizando una operaci√≥n constante en cada uno. 
  La complejidad de esta funci√≥n es ùëÇ(ùëõ), donde n es el numero de elementos que hay en data.
  
- `def calculateChecksum(data: String): Int = {}`
  Esta funci√≥n convierte una cadena en un array de bytes, lo cual tiene una complejidad de ùëÇ(ùëõ),
  donde n es la longitud de la cadena data.
  
- `def verifyChecksumCalculate(data: Array[Byte], checksum: Int): Boolean = {}`
  La complejidad total de esta funci√≥n es ùëÇ(ùëõ), donde ùëõ es el n√∫mero de elementos en data.
  
- `def verifyChecksumCalculateChecksum(data: String, checksum: Int): Boolean = {}`
  La complejidad total de esta funci√≥n es ùëÇ(ùëõ), donde ùëõ es la longitud de la cadena data.

En todas las funciones, la complejidad es lineal ùëÇ(ùëõ), donde ùëõ representa el tama√±o de los datos de entrada ya 
sea el n√∫mero de bytes en un array o la longitud de una cadena.

#### MEDICION DEL TIEMPO DE EJECUCION 

Nosotros definimos unos valores espec√≠ficos para poder calcular dicha medici√≥n, y al implementar nuestro 
c√≥digo checksum, nos dio los siguientes resultados:


A) ORGANIZAMOS LOS DATOS EN UNA TABLA:

| SIZE    | EXEC TIME1 (S) | EXEC TIME2 (S) | EXEC TIME3 (S) | EXEC TIME4 (S) | EXEC TIME5 (S) |
|---------|----------------|----------------|----------------|----------------|----------------|
| 100     | 0.188          | 0.187          | 0.172          | 0.196          | 0.219          |
| 1000    | 0.188          | 0.187          | 0.172          | 0.196          | 0.219          |
| 10000   | 0.188          | 0.187          | 0.188          | 0.212          | 0.235          |
| 100000  | 0.203          | 0.203          | 0.203          | 0.227          | 0.251          |
| 1000000 | 0.266          | 0.266          | 0.251          | 0.290          | 0.313          |

B) CALCULAMOS LOS PROMEDIOS, LO QUE DA RESULTADO A UNA NUEVA TABLA: 

| SIZE    | EXEC TIME1 (S) | EXEC TIME2 (S) | EXEC TIME3 (S) | EXEC TIME4 (S) | EXEC TIME5 (S) | AVG EXEC TIME (S) |
|---------|----------------|----------------|----------------|----------------|----------------|-------------------|
| 100     | 0.188          | 0.187          | 0.172          | 0.196          | 0.219          | 0.1924            |
| 1000    | 0.188          | 0.187          | 0.172          | 0.196          | 0.219          | 0.1924            |
| 10000   | 0.188          | 0.187          | 0.188          | 0.212          | 0.235          | 0.202             |
| 100000  | 0.203          | 0.203          | 0.203          | 0.227          | 0.251          | 0.2174            |
| 1000000 | 0.266          | 0.266          | 0.205          | 0.290          | 0.313          | 0.268             |

La grafica calculada con Python nos da igual a: 

























